<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>